<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>